@use '../variables' as v;
@use './functions' as *;

@mixin useFlexbox($dir: row, $jt: center, $al: center, $inline: none) {
  @if $inline==none {
    display: flex;
  } @else {
    display: inline-flex;
  }
  @if $dir != none {
    flex-direction: $dir;
  }
  @if $jt !=none {
    justify-content: $jt;
  }
  @if $al !=none {
    align-items: $al;
  }
}

@mixin usePosition(
  $position: relative,
  $top: none,
  $left: none,
  $right: none,
  $bottom: none
) {
  position: $position;
  @if $top != none {
    top: $top;
  }
  @if $left != none {
    left: $left;
  }

  @if ($right != none) {
    right: $right;
  }

  @if ($bottom != none) {
    bottom: $bottom;
  }
}

@mixin useSquareSize($size: 1em) {
  width: $size;
  height: $size;
}

@mixin userCenter($dir, $jt, $al) {
  @include useFlexbox($dir, $jt, $al);
}
@mixin useVerticalCenter() {
  @include userCenter($dir: row, $jt: 0, $al: center);
}

@mixin useHorizontalCenter() {
  @include userCenter($dir: column, $jt: center, $al: 0);
}

@mixin useBorderRadius($radius: 0) {
  border-radius: $radius;
}

%no-bg {
  background-color: transparent;
}

%useScrollbarStyle {
  scroll-behavior: smooth;
  scrollbar-color: lighten(v.$primary_color, 15%) lighten(v.$primary_color, 55%);

  :is(&, & *)::-webkit-scrollbar {
    width: 5px;
    background-color: lighten(v.$primary_color, 51%);
    border: 1px solid lighten(v.$primary_color, 47%);
  }

  :is(&, & *)::-webkit-scrollbar-thumb {
    background: darken(v.$primary_color, 11%);
  }
}

%useEllipsisText {
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
}

%modalContainerDefault {
  @include useFlexbox(column);
  @include usePosition(absolute, 0, 0);
  @include useSquareSize(100%);
  z-index: v.$zindex_modal_level_one;
  transition: background-color 0.01s ease;
}

@mixin useFormFloating() {
  .form-floating {
    position: relative;
    padding-block-start: 0.5rem;

    &__input {
      display: block;
      background-color: #e9ecef;
      padding-inline: 0.75rem;
      padding-block: 1rem 0.5rem;
      width: 100%;
      height: 3.5rem;
      font-size: 0.88rem;
      font-weight: 500;
      color: #3e5569;
      background-color: #fff;
      border: 0.025rem solid #d4d7da;
      border-radius: 0.225rem;
      transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;

      &:focus {
        background-color: rgba(0, 0, 0, 0.4%);
      }
      :is(&:focus, &:not(:placeholder-shown)) ~ label {
        opacity: 0.65;
        transform: scale(0.85) translateY(-0.5rem) translateX(0.15rem);
      }

      &::placeholder {
        opacity: 0;
      }
      &:required ~ label::after {
        content: ' *';
        color: #f00;
      }
    }

    &__label {
      position: absolute;
      transform-origin: 0 0;
      top: 0rem;
      left: 0;
      @include useSquareSize(100%);
      pointer-events: none;
      padding-block-start: 1.5rem;
      padding-inline-start: 0.75rem;
      font-size: 0.88rem;
      border: 1px solid transparent;
      transition: opacity 0.1s ease-in-out, transform 0.1s ease-in-out;
      color: rgb(2, 0, 48);
      font-weight: 700;
    }
  }
}

@mixin useInfoIndicator() {
  .info-indicator-wrapper {
    @include useFlexbox($jt: flex-end, $al: flex-start);
    @include usePosition(absolute, $top: 0, $right: 0);
    @extend %no-bg;
    z-index: 10;

    .info-indicator {
      @include usePosition(relative, $top: 0.3rem, $right: 0.3rem);
      @extend %no-bg;
      color: #464646b1;
      border: none;
      font-size: 1.2rem;
    }
  }
}

@mixin useHovered-info-indicator() {
  .info-indicator {
    color: #111111;
    @content;
  }
}

@mixin useLoadSpinner-md-1 {
  .loading {
    display: flex;
    align-items: flex-end;
    gap: 0.3125rem;
    font-size: 1rem;
    padding-block: 1rem;
    font-weight: 600;

    &__spinner {
      display: inline-block;
      animation-name: rotation;
      animation-duration: 500ms;
      animation-iteration-count: infinite;
      animation-timing-function: linear;
      border-color: black transparent black transparent;
      border-radius: 20px;
      border-style: double;
      border-width: 3px;

      @include useSquareSize(1.5rem);
    }

    @keyframes rotation {
      100% {
        transform: rotate(360deg);
      }
    }
  }
}

%useBtn {
  color: #e9e9e9;
  border: none;
}

@mixin useBtnStyle($color) {
  @extend %useBtn;
  box-shadow: 0 0 0.1rem 0.01rem $color;
  border: 1px solid lighten($color, 10%);
  background-color: $color;
  &:hover,
  &:focus {
    background-color: darken($color, 7%);
  }
  &:active {
    border-color: lighten($color, 30%);
    opacity: 0.7;
  }

  &:focus {
    outline: 2px solid lighten($color, 40%);
    &:hover {
      outline: 2px solid lighten($color, 40%);
      background-color: darken($color, 2%);
    }
    &.btn-primary:focus {
      outline-color: adjust-hue($color, -100deg);
    }
  }
}

@mixin useBtnNobg($color) {
  @extend %useBtn;
  background-color: transparent;
  color: rgba(0, 0, 0, 70%);

  &:hover,
  &:focus {
    color: rgba(0, 0, 0, 100%);
  }
  &:active {
    background-color: rgba(0, 0, 0, 20%);
  }

  &:focus {
    outline: 2px solid lighten($color, 40%);
    &:hover {
      outline: 2px solid lighten($color, 40%);
      background-color: lighten($color, 55%);
    }
  }
}

@mixin createButtonTheme($primary-color) {
  $secondary_color: createColor($primary-color, 290deg);
  $affirmative_color: createColor($primary-color, -40deg);
  $warning_color: createColor($primary-color, 60deg);
  $danger_color: createColor($primary-color, 120deg);

  &-primary {
    @include useBtnStyle($primary_color);
  }

  &-secondary {
    @include useBtnStyle($secondary_color);
  }

  &-affirmative {
    @include useBtnStyle($affirmative_color);
  }

  &-warning {
    @include useBtnStyle($warning_color);
  }

  &-danger {
    @include useBtnStyle($danger_color);
  }

  &-nobg {
    @include useBtnNobg($primary_color);
  }
}
